type UserId = principal;
type CellId = nat;
type Cell = 
 record {
   bookedBy: opt UserId;
   dateEndBooking: text;
   dateStartBooking: text;
   id: CellId;
   isBooked: bool;
   price: nat;
   status: BookingStatus;
 };
type BookingStatus = 
 variant {
   canceled;
   completed;
   confirmed;
   pending;
 };
service : {
  addCell: (Cell) -> ();
  addUser: (principal) -> ();
  bookCell: (principal, nat, text) -> (bool);
  checkCell: (CellId) -> (opt Cell) query;
  deployAll: () -> ();
  deployApp: () -> ();
  deployBalances: () -> ();
  deposit_cycles: () -> ();
  getCellDetails: (CellId) -> (opt Cell) query;
  getTokenBalance: (UserId) -> (nat);
  isReady: () -> (bool) query;
  listCells: () -> (vec Cell) query;
  listUsers: () -> (vec UserId) query;
  makePayment: (UserId, UserId, nat) -> (bool);
  mintTokens: (UserId, nat) -> (bool);
  registerUser: (principal) -> (bool);
  removeCell: (nat) -> ();
  removeUser: (principal) -> ();
  setBalance: (UserId, nat) -> (bool);
  setCell: (Cell) -> ();
  updateCellEndDate: (CellId, text) -> (bool);
}
